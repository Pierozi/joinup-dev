<?php

/**
 * @file
 * Provides functionality for the news content entity.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\joinup_news\Guard\FulfillmentGuard;
use Drupal\node\NodeInterface;
use Drupal\og\Og;
use Drupal\rdf_entity\RdfInterface;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function joinup_news_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // @todo Add test coverage for these constraints.
  // @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-2500
  if ($entity_type->id() == 'node' && $bundle == 'news') {
    if (!empty($fields['field_news_short_title'])) {
      $fields['field_news_short_title']->addConstraint('UniqueField');
    }
    if (!empty($fields['title'])) {
      $fields['title']->addConstraint('UniqueFieldInBundle', ['bundles' => ['news']]);
    }
  }
}

/**
 * Implements hook_node_access().
 *
 * Interrupts the permissions for updating a node. The permission is not
 * granted if there are no transitions allowed for the current state of the
 * node.
 */
function joinup_news_node_access(EntityInterface $node, $op, AccountInterface $account) {
  if ($node->bundle() != 'news') {
    return AccessResult::neutral();
  }

  if ($op == 'update') {
    $allowed_transitions = $node->get('field_news_state')->first()->getTransitions();
    if (empty($allowed_transitions)) {
      return AccessResult::forbidden();
    }
  }

  // Check if the user is a member and has a global permission.
  if ($op == 'view' && !$node->isPublished()) {
    $parent = FulfillmentGuard::getParent($node);
    // Temporary workaround because Og is not checking for membership.
    // @todo Remove workaround as soon as this is fixed in OG.
    // @see https://github.com/amitaibu/og/pull/217
    // @see https://webgate.ec.europa.eu/CITnet/jira/browse/ISAICP-2622
    if ($parent instanceof RdfInterface && Og::isMember($parent, Drupal::currentUser())) {
      /** @var \Drupal\Core\Access\AccessResult $global_permission */
      $global_permission = \Drupal::service('og.access')->userAccessEntity('view any unpublished content', $parent, $account);
      if ($global_permission->isAllowed()) {
        return $global_permission;
      }

      $global_permission = \Drupal::service('og.access')->userAccessEntity('view any unpublished news content', $parent, $account);
      if ($global_permission->isAllowed()) {
        return $global_permission;
      }
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Handles the publication of the node. For the states 'draft', 'proposed', the
 * node should be non published. For the states 'validated', 'in_assessment',
 * 'deletion_request', the node should be published.
 */
function joinup_news_node_presave(EntityInterface $entity) {
  if ($entity->bundle() != 'news') {
    return;
  }

  $state = $entity->field_news_state->first()->value;
  if (empty($state)) {
    return;
  }

  if (in_array($state, ['draft', 'proposed'])) {
    $entity->setPublished(FALSE);
  }
  elseif (in_array($state, ['validated', 'in_assessment', 'deletion_request'])) {
    $entity->setPublished(TRUE);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * The state_machine forces the current value to be available in the options.
 * However, there are cases where the user cannot keep the node in the same
 * state when editing it.
 * Since we are already checking for the allowed states and we are blocking the
 * access if there are no available transitions, it is safe to simply remove
 * the default value if it is not included in the allowed transitions.
 *
 * @see \Drupal\state_machine\Plugin\Field\FieldType\StateItem::getAllowedStates
 * @see https://www.drupal.org/node/2746091
 */
function joinup_news_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $fieldType = $context['items']->getFieldDefinition()->getType();
  if ($fieldType != 'state' || empty($form_state->getBuildInfo()['callback_object'])) {
    return;
  }
  $entity = $form_state->getBuildInfo()['callback_object']->getEntity();
  if (!($entity instanceof NodeInterface) || $entity->bundle() != 'news') {
    return;
  }

  $default_value = reset($element['#default_value']);
  $allowed_transitions = $entity->get('field_news_state')->first()->getTransitions();
  $allowed_states = array_map(function ($transition) {
    return $transition->getToState()->getId();
  }, $allowed_transitions);

  if (!in_array($default_value, $allowed_states)) {
    unset($element['#options'][$default_value], $element['#default_value']);
    // Re-set a default because otherwise the 'empty' value will be available.
    $default_value = array_keys($allowed_transitions);
    $element['#default_value'] = reset($default_value);
  }
}
