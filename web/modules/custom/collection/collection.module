<?php

/**
 * @file
 * Main functions and hook implementations of the Collection module.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\og\Og;
use Drupal\og\OgGroupAudienceHelper;
use Drupal\og\OgMembershipInterface;
use Drupal\og\OgRoleInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function collection_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the 'negation' option for collection block visibility. There are no
  // good use cases to show a block on all pages, except on collection pages.
  $form['visibility']['collection']['negate']['#access'] = FALSE;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function collection_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Make sure the collection label is unique.
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'collection' && !empty($fields['label'])) {
    $fields['label']->addConstraint('UniqueFieldInBundle', ['bundles' => ['collection']]);
  }
}

/**
 * Implements hook_entity_insert().
 */
function collection_entity_insert(EntityInterface $entity) {
  collection_entity_update($entity);

  // When a new collection is proposed, give the user the 'group owner' role.
  // This will not occur if the user is the anonymous, i.e. the entity was
  // created by some batch process or some importing.
  if (Og::isGroup($entity->getEntityTypeId(), $entity->bundle()) && $entity->bundle() === 'collection' && !\Drupal::currentUser()->isAnonymous()) {
    // The membership has already been created in og_entity_insert().
    // @see og_entity_insert()
    /** @var \Drupal\Core\Entity\EntityStorageInterface $storage */
    $storage = \Drupal::entityTypeManager()->getStorage('og_membership');
    $properties = [
      'type' => OgMembershipInterface::TYPE_DEFAULT,
      // @todo Normally we should use $entity->getOwnerId() here, but RDF Entity
      //   does not implement EntityOwnerInterface and does not have this
      //   method.
      // @see rdf_entity_entity_insert()
      'uid' => \Drupal::currentUser()->id(),
      'entity_id' => $entity->id(),
      'entity_type' => $entity->getEntityTypeId(),
      'field_name' => OgGroupAudienceHelper::DEFAULT_FIELD,
    ];

    /** @var \Drupal\og\OgMembershipInterface $membership */
    $memberships = $storage->loadByProperties($properties);
    $membership = reset($memberships);

    // The group owner inherits all roles of a collection member, facilitator
    // and administrator.
    $roles = [
      OgRoleInterface::AUTHENTICATED,
      OgRoleInterface::ADMINISTRATOR,
      'facilitator',
    ];
    foreach ($roles as $role) {
      // The role ID is comprised of the entity type ID, bundle ID and role
      // name, separated by dashes.
      $role_id = 'rdf_entity-collection-' . $role;
      $membership->addRole($role_id);
    }
    $membership->save();
  }
}

/**
 * Implements hook_entity_update().
 *
 * Invalidate the og_content cache tag of the groups this entity belongs to.
 */
function collection_entity_update(EntityInterface $entity) {
  // @todo Fix cache invalidating.
  // @see ISAICP-2475.
  if (TRUE) {
    return;
  }
  $entity_type_id = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  if (Og::isGroupContent($entity_type_id, $bundle)) {
    foreach (Og::getGroupIds($entity) as $entity_type => $ids) {
      foreach ($ids as $id) {
        Cache::invalidateTags(['og_group_content:' . $id]);
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function collection_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_insert') {
    // Make sure collection_entity_insert() runs after og_entity_insert(). The
    // latter creates an OgMembership entry for the collection owner when a new
    // collection is proposed, and collection_entity_insert() needs to modify
    // this membership to add the required OG roles to it.
    $group = $implementations['collection'];
    unset($implementations['collection']);
    $implementations['collection'] = $group;
  }
}
