<?php

/**
 * @file
 * Contains hooks regarding the solution rdf entity bundle.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\og\Entity\OgMembership;
use Drupal\og\Entity\OgRole;
use Drupal\og\OgRoleInterface;
use Drupal\rdf_entity\Entity\Rdf;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function solution_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() == 'rdf_entity' && $bundle == 'solution' && !empty($fields['label'])) {
    $fields['label']->addConstraint('UniqueSolutionTitle', []);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * This performs the following actions when a solution is created:
 *   - Grants the 'owner' and 'facilitator' roles to the user that creates the
 *     solution.
 *   - Links the solution to the collection to which it belongs.
 *     According to the ADMS model, the linked solutions of a collection are
 *     stored as a property of the collection itself, called affiliates.
 *     The process of linking a solution to a collection is:
 *      - Request an affiliation. This request is registered by adding the
 *        collection to the affiliation_request field of the solution.
 *      - Accept the affiliation. The collection is removed from the affiliation
 *        request of the solution and the solution is added to the affiliates
 *        field of the collection.
 *     In order for a solution to be affiliated with a collection when it is
 *     created, the collection should be passed to the affiliate_request field
 *     before it is saved. The hook below will take care of automatically
 *     linking it.
 *
 * @see https://www.w3.org/TR/vocab-adms/#the-adms-domain-model
 */
function solution_rdf_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() !== 'solution') {
    return;
  }

  // When a new solution is created, give the current user the 'group owner'
  // role, if it is not the anonymous user.
  if (!\Drupal::currentUser()->isAnonymous()) {
    // The group owner inherits all roles of a solution facilitator and
    // administrator.
    $roles = [
      'rdf_entity-solution-' . OgRoleInterface::ADMINISTRATOR,
      'rdf_entity-solution-facilitator',
    ];

    /** @var \Drupal\og\OgMembershipInterface $membership */
    $membership = OgMembership::create();
    $membership
      ->setUser(\Drupal::currentUser())
      ->setGroup($entity)
      ->setRoles(array_values(OgRole::loadMultiple($roles)))
      ->save();
  }

  // Check if a reference to a collection is present in the affiliation field.
  /** @var \Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem $affiliate_request */
  if (($affiliate_request = $entity->get('field_is_affiliations_requests')->first()) && !$affiliate_request->isEmpty()) {
    /** @var \Drupal\rdf_entity\RdfInterface $collection */
    $collection = Rdf::load($affiliate_request->getValue()['target_id']);

    // If any entity other than a collection has been referenced there is a
    // problem with our field definition.
    if (empty($collection) || $collection->bundle() !== 'collection') {
      throw new \Exception('Only collections can be referenced in affiliation requests.');
    }

    // Move the reference to the collection. The ADMS specification requires the
    // relation to be in the inverse direction.
    $collection->set('field_ar_affiliates', $entity->id());
    $collection->save();
    $entity->set('field_is_affiliations_requests', NULL);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 *
 * Interrupts the permissions for updating a solution. The permission is not
 * granted if there are no transitions allowed for the current state of the
 * node.
 */
function solution_rdf_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->bundle() != 'solution') {
    return AccessResult::neutral();
  }

  if ($operation == 'edit') {
    $allowed_transitions = $entity->get('field_is_state')->first()->getTransitions();
    if (empty($allowed_transitions)) {
      return AccessResult::forbidden();
    }
  }

  return AccessResult::neutral();
}
