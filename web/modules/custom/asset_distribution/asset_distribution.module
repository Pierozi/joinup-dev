<?php

/**
 * @file
 * Contains asset_distribution.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\rdf_entity\Entity\Rdf;
use Drupal\rdf_entity\Entity\RdfEntityType;
use Drupal\rdf_entity\RdfInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Asset distributions are always created in the context of an asset release.
 * Retrieve the solution from the route context and save it in the form state.
 *
 * @see \Drupal\asset_distribution\Controller\AssetDistributionController::add()
 */
function asset_distribution_form_rdf_entity_asset_distribution_form_alter(&$form, FormStateInterface $form_state) {
  $asset_release = \Drupal::routeMatch()->getParameter('rdf_entity');

  // Bail out if the asset_release is not present on the route.
  // Since this form is only intended to be used in the context of a release
  // there is no field provided for it. Without a release the asset
  // distribution will be dangling and won't be reachable.
  if (!$asset_release instanceof RdfInterface || $asset_release->bundle() !== 'asset_release') {
    throw new \InvalidArgumentException('Distributions can only be created in context of a solution.');
  }

  $form_state->set('asset_release_id', $asset_release->id());

  // Add a submit handler so we can add the distribution relation to the
  // solution.
  $form['actions']['submit']['#submit'][] = 'asset_distribution_form_rdf_entity_asset_distribution_form_submit';
}

/**
 * Submit handler for rdf_entity_asset_distribution_form.
 *
 * When creating a new asset distribution, add the relation to the asset
 * release. Usually this relation would point the other way, but this is
 * how the data model has been designed.
 *
 * @see asset_distribution_form_rdf_entity_asset_distribution_form_alter()
 */
function asset_distribution_form_rdf_entity_asset_distribution_form_submit(&$form, FormStateInterface $form_state) {
  $asset_release = Rdf::load($form_state->get('asset_release_id'));
  /** @var RdfInterface $distribution */
  $distribution = $form_state->getFormObject()->getEntity();

  // Only add the relation if it doesn't yet exist.
  $related_distributions = $asset_release->get('field_isr_distribution')->getValue();
  foreach ($related_distributions as $related_distribution) {
    if ($related_distribution['target_id'] === $distribution->id()) {
      return;
    }
  }

  $related_distributions[]['target_id'] = $distribution->id();
  $asset_release->set('field_isr_distribution', $related_distributions);
  $asset_release->save();
}

/**
 * Implements hook_rdf_load_bundle_alter().
 *
 * There is an initial check whether the bundle is empty because the method
 * that invokes this hook is also called for taxonomies and the bundle is
 * currently being skipped for the taxonomies.
 */
function asset_distribution_rdf_load_bundle_alter($entity_values, &$bundle) {
  if (!empty($bundle) && $bundle->id() == 'solution' && isset($entity_values['http://purl.org/dc/terms/isVersionOf'])) {
    $bundle = \Drupal::entityTypeManager()->getStorage('rdf_type')->load('asset_release');
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function asset_distribution_entity_extra_field_info() {
  $fields = [];

  // Aggregate the licences of the distributions belonging to a solution in a
  // pseudo-field.
  $bundle = RdfEntityType::load('solution');
  // During installation, this bundle might not yet be available.
  if ($bundle) {
    $fields['rdf_entity'][$bundle->id()]['display']['licence'] = [
      'label' => t('Licence'),
      'description' => t('The licence type, aggregated from the related releases'),
      'visible' => TRUE,
    ];
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function asset_distribution_rdf_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() !== 'solution' || !$display->getComponent('licence')) {
    return;
  }

  // Retrieve all the distributions related to this solution.
  $relation_manager = \Drupal::service('asset_distribution.relations');
  $distributions = $relation_manager->getSolutionDistributions($entity);

  // Loop over all the distributions and fetch the related licence entity, if
  // any.
  $licences = [];
  foreach ($distributions as $distribution) {
    $licence_field = $distribution->get('field_ad_licence');
    if (!$licence_field->isEmpty()) {
      $licence = $licence_field->first()->get('entity')->getValue();
      $licences[$licence->id()] = $licence;
    }
  }

  // Add licence labels as extra element.
  $build['licence'] = [
    '#type' => 'container',
    '#theme' => 'licence',
  ];
  foreach ($licences as $licence) {
    $build['licence'][] = [
      '#plain_text' => $licence->label(),
    ];
  }
}
