<?php

/**
 * @file
 * Functions to support theming in the Joinup theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_page().
 */
function joinup_theme_preprocess_page(&$variables) {
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();

  // Set page title.
  $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

  // We need to show the header in a blue variant on certain routes:
  // node and rdf entity forms, user forms.
  $route_name = $route_match->getRouteName();
  $blue_header_routes = array(
    'collection.propose_form',
    'entity.node.edit_form',
    'entity.rdf_entity.edit_form',
    'node.add',
    'node.add_page',
    'rdf_entity.rdf_add',
    'rdf_entity.rdf_add_page',
    'user.login',
    'user.pass',
    'user.register',
  );

  if (!empty($route_name) && in_array($route_name, $blue_header_routes)) {
    $variables['is_blue_header'] = TRUE;

    // Move the title from the content region to featured region.
    $title = $variables['page']['content']['pagetitle'];
    unset($variables['page']['content']['pagetitle']);
  }

  $variables['title'] = $title;
}

/**
 * Implements hook_preprocess_page_title().
 */
function joinup_theme_preprocess_page_title(&$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Array contains create pages.
  $create_content_routes = array(
    'node.add',
    'node.add_page',
    'rdf_entity.rdf_add',
    'rdf_entity.rdf_add_page',
    'collection.propose_form',
  );

  // Set a flag when we are on content creation routes
  // in order to customise some templates.
  if (!empty($route_name) && in_array($route_name, $create_content_routes)) {
    $variables['is_create_page'] = TRUE;
  }
}

/**
 * Implements hook_theme_preprocess_menu().
 */
function joinup_theme_preprocess_menu(&$variables) {
  if ($variables['menu_name'] != 'account') {
    return;
  }
  // Set the account logo.
  $account = \Drupal::currentUser()->getAccount();
  $user = user_load($account->id(), TRUE);
  /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $photo */
  $photo = $user->get('field_user_photo')->first();
  $variables['profile_icon'] = '/themes/joinup/images/user-profile-icon.png';
  if ($photo) {
    $reference = $photo->getValue();
    /** @var \Drupal\file\Entity\File $file */
    $file = File::load($reference['target_id']);
    $uri = $file->getFileUri();
    $url = ImageStyle::load('profile_icon')->buildUrl($uri);
    $variables['profile_icon'] = $url;
  }
}

/**
 * Implements hook_preprocess_block().
 */
function joinup_theme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id']) && $variables['elements']['#id'] == 'joinup_theme_content') {
    $route_match = \Drupal::routeMatch();
    $route_name = $route_match->getRouteName();

    // Get entity type.
    $entity = $route_match->getParameter('rdf_entity');
    if (!empty($entity)) {
      $entity_type = $entity->getType();
    }

    // Check if page is a listing and should not have a white background.
    if ($route_name == 'view.collections.page_1' || (isset($entity_type) && $entity_type == 'collection' && $route_name == 'entity.rdf_entity.canonical')) {
      $variables['is_view'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for fieldset.html.twig.
 */
function joinup_theme_preprocess_fieldset(&$variables) {
  // Make sure the "for" attribute is added to the label so it is clear to which
  // of the wrapped elements this label belongs. This is important for
  // accessibility.
  $variables['legend']['attributes'] = new Attribute([
    'for' => $variables['element']['#id'],
  ]);
}

/**
 * Implements hook_preprocess_HOOK() for container.html.twig.
 */
function joinup_theme_preprocess_container(&$variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  $form_routes = array(
    'node.add',
    'rdf_entity.rdf_add',
    'entity.node.edit_form',
    'collection.propose_form',
    'entity.rdf_entity.edit_form',
  );

  // Check if container is field element - it has only one parent.
  if (!empty($route_name) && in_array($route_name, $form_routes)
    && isset($variables['element']['#parents'])
    && count($variables['element']['#parents']) == 1
    && $variables['element']['#id'] != 'edit-actions') {
    $variables['is_form_wrapper'] = TRUE;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form-element.html.twig.
 */
function joinup_theme_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form_element__' . str_replace('-', '_', $variables['element']['#type']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for select.html.twig.
 */
function joinup_theme_theme_suggestions_select_alter(array &$suggestions, array $variables) {
  // Array contains all select elements ids, which are displayed as slider.
  $slider_ids = array(
    'edit-field-ar-elibrary-creation',
  );

  if (in_array($variables['element']['#id'], $slider_ids)) {
    $suggestions[] = 'select__slider';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for container.html.twig.
 */
function joinup_theme_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#id']) && $variables['element']['#id'] == 'edit-field-ar-owner-actions') {
    $suggestions[] = 'container__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form.html.twig.
 */
function joinup_theme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#form_id']);
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function joinup_theme_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (!empty($variables['element']['#type'])) {
    // Array contains form elements, which are displayed with floating label.
    $floating_label_types = [
      'email',
      'entity_autocomplete',
      'password',
      'textfield',
      'url',
    ];

    if (in_array($variables['element']['#type'], $floating_label_types)) {
      if ($hook == 'form_element') {
        $suggestions[] = 'form_element__floating';
      }
      elseif ($hook == 'input') {
        $suggestions[] = 'input__floating';
      }
    }

    if (isset($variables['element']['#theme']) && $variables['element']['#theme'] == 'licence') {
      $original_theme_hook = $variables['theme_hook_original'];
      $suggestions[] = $original_theme_hook . '__licence';
    }
  }
  return $suggestions;
}
